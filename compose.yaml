# Create your compose file. To learn more, please visit
# https://docs.docker.com/reference/compose-file/

services:
  nim-llm:
    container_name: llama
    image: nvcr.io/nim/meta/llama-3.2-3b-instruct:1.6.0
    volumes:
    - ${LOCAL_NIM_CACHE:-./}:/opt/nim/.cache
    user: "${USERID}"
    ports:
    - "8000:8000"
    expose:
    - "8000"
    environment:
      - NGC_API_KEY=${NGC_API_KEY}
      - NIM_OTEL_SERVICE_NAME=llama
      - NIM_OTEL_TRACES_EXPORTER=otlp
      - NIM_OTEL_METRICS_EXPORTER=console
      - NIM_OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - NIM_ENABLE_OTEL=true
      # Triton OpenTelemetry Settings
      - TRITON_OTEL_URL=http://otel-collector:4318/v1/traces
      - TRITON_OTEL_RATE=1
    shm_size: 8gb
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${INFERENCE_GPU_COUNT:-all}
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8000/v1/health/ready')"]
      interval: 10s
      timeout: 20s
      retries: 100
    profiles: ["all","nim"]
    
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    hostname: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./code/config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "9988:9988" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "9411" # Zipkin receiver
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP/HTTP receiver
      - "55680:55679" # zpages extension
    depends_on:
      - jaeger
    profiles: ["all","observability"]

  # zipkin:
  #   image: openzipkin/zipkin
  #   environment:
  #     JAVA_OPTS: "-Xms4g -Xmx8g -XX:+ExitOnOutOfMemoryError"
  #   ports:
  #     - "9411:9411" # Zipkin UI and API
  #   expose:
  #   - "9411"
  #   profiles: ["all","observability"]
    
  jaeger:
    image: jaegertracing/jaeger:latest
    ports:
      - "16686:16686"
      - "8888:8888"
      - "9889:8889"
      - "9317:4317"
      - "9318:4318"
    expose:
      - "16686"
    profiles: ["all","observability"]

  prometheus:
    image: prom/prometheus:latest
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
    volumes:
      - ./code/config/prometheus.yaml:/etc/prometheus/prometheus-config.yaml
    ports:
      - "9090:9090"
    profiles: ["all","observability"]

  grafana:
    container_name: grafana-service
    image: grafana/grafana
    ports:
      - "3000:3000"
    expose:
      - "3000"
    volumes:
      - ./data/grafana/provisioning:/etc/grafana/provisioning
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    profiles: ["all","observability"]
    
volumes:
  grafana-storage:
    driver: local